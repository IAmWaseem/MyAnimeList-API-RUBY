# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module MyAnimeListApi
  class AnimeController < BaseController
    @@instance = AnimeController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Returns a specific Anime.
    # @param [Integer] anime_id Required parameter: The id of the anime.
    # @param [Boolean] mine Optional parameter: Include to also retrieve the authenticated user's anime details (e.g. user's score, watched status, watched episodes). Requires authentication.
    # @return RetrieveAnAnimeResponse response from the API call
    def retrieve_an_anime(anime_id, 
                          mine = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/anime/{anime_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'anime_id' => anime_id
      }
      _query_builder = APIHelper.append_url_with_query_parameters _query_builder, {
        'mine' => mine
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      _context = execute_request(_request)

      # validate response against endpoint and global error codes
      if _context.response.status_code == 404
        raise APIException.new '404 - Unexpected error in API call. See HTTP response body for details.', _context
      end
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return RetrieveAnAnimeResponse.from_hash(decoded)
    end

    # Returns all anime matching query.  Only the following fields are available:
    # **id**, **title**, **episodes**, **type**, **synopsis**, **image_url**,
    # **members_score**, **start_date**, **end_date**, **classification**
    # @param [String] query Required parameter: The query you want to perform
    # @return List of SearchForAnAnimeResponse response from the API call
    def search_for_an_anime(query)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/anime/search/{query}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'query' => query
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return decoded.map{|element| SearchForAnAnimeResponse.from_hash(element)}
    end
  end
end
